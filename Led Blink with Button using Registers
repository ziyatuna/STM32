#include "main.h"
void GPIO_Config(void);
void Clock_Config(void);
uint32_t count=0;
int main(void)
{
Clock_Config();
GPIO_Config();
GPIOD->ODR=0x00001000;
  while (1)
  {
	  count=0;
	  GPIOD->ODR=0x00001000;
	  while(count!=4)
	  {
		  if(GPIOA->IDR & 0x00000001)
		  		 	  {
		  		 		  while(GPIOA->IDR & 0x00000001);
		  		 		  GPIOD->ODR<<=1;
		  		 		  count++;
		  		 	  }
	  }
  }
}

void Clock_Config(void)
{
	RCC->CR |=0x01010000;// HSEON and PLLON is enabled.
	while(!(RCC->CR & 0x00020000));//Wait for HSERDY to 1.
	RCC->CR |=0x00080000;// CSS enable.
	RCC->PLLCFGR |=0x00400000;// PLLSRC is choosen HSE.
	//SYSCLK=[(HSE/PLLM)*PLLN]/PLLP
	RCC->PLLCFGR |=0x00000004;//PLLM=4
	RCC->PLLCFGR |=0x002A00;//PLLN=168
	RCC->PLLCFGR |=0x00000000;//PLLP=2
	RCC->CFGR |= 0X00000000;// AHB Prescaler=1
	RCC->CFGR |= 0x00009400;// APB1 Prescaler=4, APB2 Prescaler=2
	RCC->CIR |= 0x00080000; //HSERDY Flag is cleared.
	RCC->CIR |= 0x00800000; //CSS Flag is cleared.
	//RCC->AHB1RSTR |= 0x0000000F;//GPIO A/B/C/D Ports reset.
}
void GPIO_Config(void)
{
	RCC->AHB1ENR=0x00000009;
	GPIOD->MODER=0x55000000;
	GPIOA->PUPDR=0x00000002;
}

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
